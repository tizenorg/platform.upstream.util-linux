.TH LOSETUP 8 "2012-09-24" "Linux" "MAINTENANCE COMMANDS"
.SH NAME
losetup \- set up and control loop devices
.SH SYNOPSIS
.ad l
.B losetup
[options]
.I loop_device
file
.br
.B losetup -F
[options]
.I loop_device
[file]
.br
.B losetup
[
.B \-d
]
.I loop_device
.br
.B losetup -a
.br
.B losetup -f
.br
.B losetup
.B \-R
.I loop_device
.ad b
.SH DESCRIPTION
.B losetup
is used to associate loop devices with regular files or block devices,
to detach loop devices and to query the status of a loop device. If only the
\fIloop_device\fP argument is given, the status of the corresponding loop
device is shown.
.SH OPTIONS
.IP \fB\-a\fP
Show status of all loop devices.
.IP "\fB\-C \fIitercountk\fP"
Runs hashed passphrase through \fIitercountk\fP thousand iterations of AES-256
before using it for loop encryption. This consumes lots of CPU cycles at
loop setup/mount time but not thereafter. In combination with passphrase seed
this slows down dictionary attacks. Iteration is not done in multi-key mode.
.IP "\fB\-d\fP"
Detach the file or device associated with the specified loop device.
.IP "\fB\-e \fIencryption\fP"
.RS
Enable data encryption. Following encryption types are recognized:
.IP \fBNONE\fP
Use no encryption (default).
.PD 0
.IP \fBXOR\fP
Use a simple XOR encryption.
.IP "\fBAES128 AES\fP"
Use 128 bit AES encryption. Passphrase is hashed with SHA-256 by default.
.IP \fBAES192\fP
Use 192 bit AES encryption. Passphrase is hashed with SHA-384 by default.
.IP \fBAES256\fP
Use 256 bit AES encryption. Passphrase is hashed with SHA-512 by default.

.IP "\fBtwofish128 twofish160 twofish192 twofish256\fP"
.IP "\fBblowfish128 blowfish160 blowfish192 blowfish256\fP"
.IP "\fBserpent128 serpent192 serpent256 mars128 mars192\fP"
.IP "\fBmars256 rc6-128 rc6-192 rc6-256 tripleDES\fP"
These encryption types are available if they are enabled in kernel
configuration or corresponding modules have been loaded to kernel.
.PD
.RE
.IP "\fB\-f\fP"
Find and show next unused loop device.
.IP "\fB\-F\fP"
Reads and uses mount options from /etc/fstab that match specified loop
device, including offset= sizelimit= encryption= pseed= phash= loinit=
gpgkey= gpghome= cleartextkey= itercountk= and looped to device/file name.
loop= option in /etc/fstab must match specified loop device name. Command
line options take precedence in case of conflict.
.IP "\fB\-G \fIgpghome\fP"
Set gpg home directory to \fIgpghome\fP, so that gpg uses public/private
keys on \fIgpghome\fP directory. This is only used when gpgkey file needs to
be decrypted using public/private keys. If gpgkey file is encrypted with
symmetric cipher only, public/private keys are not required and this option
has no effect.
.IP "\fB\-H \fIphash\fP"
Uses \fIphash\fP function to hash passphrase. Available hash functions are
sha256, sha384, sha512 and rmd160. unhashed1 and unhashed2
functions also exist for compatibility with some obsolete implementations.

Hash function random does not ask for passphrase but sets up random keys and
attempts to put loop to multi-key mode. When random/1777 hash type is used
as mount option for mount program, mount program will create new file system
on the loop device and construct initial permissions of file system root
directory from octal digits that follow the slash character.

WARNING! DO NOT USE RANDOM HASH TYPE ON PARTITION WITH EXISTING IMPORTANT
DATA ON IT. RANDOM HASH TYPE WILL DESTROY YOUR DATA.
.IP "\fB\-I \fIloinit\fP"
Passes a numeric value of \fIloinit\fP as a parameter to cipher transfer
function. Cipher transfer functions are free to interpret value as they
want.
.IP "\fB\-K \fIgpgkey\fP"
Passphrase is piped to gpg so that gpg can decrypt file \fIgpgkey\fP which
contains the real keys that are used to encrypt loop device. If decryption
requires public/private keys and gpghome is not specified, all users use
their own gpg public/private keys to decrypt \fIgpgkey\fP. Decrypted
\fIgpgkey\fP should contain 1 or 64 or 65 keys, each key at least 20
characters and separated by newline. If decrypted \fIgpgkey\fP contains 64
or 65 keys, then loop device is put to multi-key mode. In multi-key mode
first key is used for first sector, second key for second sector, and so on.
65th key, if present, is used as additional input to MD5 IV computation.
.IP "\fB\-o \fIoffset\fP"
The data start is moved \fIoffset\fP bytes into the specified file or
device. Normally offset is included in IV (initialization vector)
computations. If offset is prefixed with @ character, then offset is not
included in IV computations. @ prefix functionality may not be supported on
some older kernels and/or loop drivers.
.IP "\fB\-p \fIpasswdfd\fP"
Read the passphrase from file descriptor \fIpasswdfd\fP instead of the
terminal. If -K option is not being used (no gpg key file), then losetup
attempts to read 65 keys from \fIpasswdfd\fP, each key at least 20
characters and separated by newline. If losetup successfully reads 64 or 65
keys, then loop device is put to multi-key mode. If losetup encounters
end-of-file before 64 keys are read, then only first key is used in
single-key mode.

echo SecretPassphraseHere | losetup -p0 -K foo.gpg -e AES128 ...

In above example, losetup reads passphrase from file descriptor 0 (stdin).
.IP "\fB\-P \fIcleartextkey\fP"
Read the passphrase from file \fIcleartextkey\fP instead of the
terminal. If -K option is not being used (no gpg key file), then losetup
attempts to read 65 keys from \fIcleartextkey\fP, each key at least 20
characters and separated by newline. If losetup successfully reads 64 or 65
keys, then loop device is put to multi-key mode. If losetup encounters
end-of-file before 64 keys are read, then only first key is used in
single-key mode. If both -p and -P options are used, then -p option takes
precedence. These are equivalent:

losetup -p3 -K foo.gpg -e AES128 ...   3<someFileName

losetup -P someFileName -K foo.gpg -e AES128 ...

In first line of above example, in addition to normal open file descriptors
(0==stdin 1==stdout 2==stderr), shell opens the file and passes open file
descriptor to started losetup program. In second line of above example,
losetup opens the file itself.
.IP "\fB\-r\fP"
Read-only mode.
.IP "\fB\-R\fP"
Resize existing, already set up loop device, to new changed underlying
device size. This option is for changing mounted live file system size on
LVM volume. This functionality may not be supported on some older kernels
and/or loop drivers.
.IP "\fB\-s \fIsizelimit\fP"
Size of loop device is limited to \fIsizelimit\fP bytes. If unspecified or
set to zero, loop device size is set to maximum available (file size minus
offset). This option may not be supported on some older kernels and/or loop
drivers.
.IP "\fB\-S \fIpseed\fP"
Sets encryption passphrase seed \fIpseed\fP which is appended to user supplied
passphrase before hashing. Using different seeds for different partitions
makes dictionary attacks slower but does not prevent them if user supplied
passphrase is guessable. Seed is not used in multi-key mode.
.IP "\fB\-T\fP"
Asks passphrase twice.
.IP "\fB\-v\fP"
Verbose mode.
.SH RETURN VALUE
.B losetup
returns 0 on success, nonzero on failure. When
.B losetup
displays the status of a loop device, it returns 1 if the device
is not configured and 2 if an error occurred which prevented
.B losetup
from determining the status of the device.

.SH FILES
.nf
/dev/loop0,/dev/loop1,...   loop devices (major=7)
.fi
.SH EXAMPLE
The following commands can be used as an example of using the loop device.
.nf

dd if=/dev/zero of=/file bs=1k count=500
head -c 3705 /dev/random | uuencode -m - | head -n 66 \\
    | tail -n 65 | gpg --symmetric -a >/etc/fskey9.gpg
losetup -e AES128 -K /etc/fskey9.gpg /dev/loop0 /file
mkfs -t ext2 /dev/loop0
mount -t ext2 /dev/loop0 /mnt
 ...
umount /dev/loop0
losetup -d /dev/loop0
.fi
.SH RESTRICTION
XOR encryption is terribly weak.
.SH AUTHORS
.nf
Original version: Theodore Ts'o <tytso@athena.mit.edu>
AES support: Jari Ruusu
.fi
